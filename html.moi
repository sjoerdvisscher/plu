# Declare some Moiell attributes used by nodes.
@name; @attrs; @xml; @childNodes; @nodeValue


# Declare the element "class".
?Element = {
  # The set of xml attributes used by this type of element, empty by default.
  attrs = ()
  # The childNodes are the object contents, retrieved by evaluating $ (the current object).
  childNodes = $()
  # This Moiell attribute serializes the element.
  xml = "<" ++ $.name ++ Concat($ attrXml $.attrs) ++ ">" ++ Concat($.childNodes.xml) ++ "</" ++ $.name ++ ">"
}

# attrXml takes an element and a Moiell attribute representing an xml attribute.
# It returns the xml serialization of the attribute and its value.
?attrXml = ?elt -> ?attr -> " " ++ attrName.attr ++ "=\"" ++ elt.attr ++ "\""

# A lookup object of attribute names.
?attrName = { href = "href"; metaname = "name"; content = "content" }


# Declare the text node "class".
?TextNode = {
  xml = $.nodeValue
}

# Shorthand for creating text nodes.
?% = ?s -> TextNode{ nodeValue = s }


# Create some element types.
?html = Element{ name = "html" }
?head = Element{ name = "head" }
?body = Element{ name = "body" }
?p    = Element{ name = "p" }

# The a element with href attribute.
@href
?a    = Element{ name = "a"; attrs = href }

# The meta element with name and content attribute.
@metaname; @content
?meta = Element{ name = "meta"; attrs = metaname, content }

# An example of an xml document.
?doc = html{
  head{
    meta{ metaname = "description"; content = "Moiell test" }
  }
  body{
    p{
      %"Hallo "
      a{ href = "w3future.com"; %"link" }
      %" Doei!"
    }
  }
}

# Run the serialization.
doc.xml

# Concat a sequence of strings.
?Concat = ?x,?xs => 
  x And (x ++ Concat(xs)) Or ""